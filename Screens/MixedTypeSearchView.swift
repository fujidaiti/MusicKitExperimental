/*
Ê∑∑ÂêàÁ®ÆÂà•Ê§úÁ¥¢ÁîªÈù¢
Album/Song/Artist „ÅÆÊ®™Êñ≠Ê§úÁ¥¢„Å®ÈÅ∏Êäû
*/

import MusicKit
import SwiftUI

enum MixedItemType: String, CaseIterable {
    case albums = "albums"
    case songs = "songs" 
    case artists = "artists"
    
    var displayName: String {
        switch self {
        case .albums: return "„Ç¢„É´„Éê„É†"
        case .songs: return "Ê•ΩÊõ≤"
        case .artists: return "„Ç¢„Éº„ÉÜ„Ç£„Çπ„Éà"
        }
    }
}

struct MixedSearchResult: Identifiable {
    let id: String
    let name: String
    let artistName: String
    let type: MixedItemType
    let musicItemID: MusicItemID?
    
    init(from album: Album) {
        self.id = album.id.rawValue
        self.name = album.title
        self.artistName = album.artistName
        self.type = .albums
        self.musicItemID = album.id
    }
    
    init(from song: Song) {
        self.id = song.id.rawValue
        self.name = song.title
        self.artistName = song.artistName
        self.type = .songs
        self.musicItemID = song.id
    }
    
    init(from artist: Artist) {
        self.id = artist.id.rawValue
        self.name = artist.name
        self.artistName = artist.name
        self.type = .artists
        self.musicItemID = artist.id
    }
}

struct MixedTypeSearchView: View {
    @State private var searchTerm = ""
    @State private var searchResults: [MixedSearchResult] = []
    @State private var selectedItems: Set<String> = []
    @State private var isLoading = false
    @State private var errorMessage: String?
    @State private var showError = false
    
    var body: some View {
        VStack(spacing: 0) {
            VStack(spacing: 16) {
                HStack {
                    TextField("„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢", text: $searchTerm)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                    
                    Button("Ê§úÁ¥¢") {
                        performSearch()
                    }
                    .buttonStyle(.prominent)
                    .disabled(searchTerm.isEmpty || isLoading)
                }
                
                HStack {
                    Text("ÈÅ∏Êäû‰∏≠: \(selectedItems.count)‰ª∂")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    if !selectedItems.isEmpty {
                        Button("„ÇØ„É™„Ç¢") {
                            selectedItems.removeAll()
                        }
                        .font(.caption)
                    }
                }
            }
            .padding()
            
            Divider()
            
            if isLoading {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text("Ê§úÁ¥¢‰∏≠...")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding()
                Spacer()
            } else if searchResults.isEmpty && !searchTerm.isEmpty {
                VStack {
                    Image(systemName: "magnifyingglass")
                        .font(.largeTitle)
                        .foregroundColor(.secondary)
                    Text("Ê§úÁ¥¢ÁµêÊûú„Å™„Åó")
                        .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else if !searchResults.isEmpty {
                List(searchResults) { result in
                    SelectableMixedItemCell(
                        item: result,
                        isSelected: selectedItems.contains(result.id),
                        onSelectionChanged: { isSelected in
                            if isSelected {
                                selectedItems.insert(result.id)
                            } else {
                                selectedItems.remove(result.id)
                            }
                        }
                    )
                }
            } else {
                VStack {
                    Image(systemName: "magnifyingglass")
                        .font(.largeTitle)
                        .foregroundColor(.secondary)
                    Text("„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶Ê§úÁ¥¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
            
            if !selectedItems.isEmpty {
                VStack(spacing: 8) {
                    Divider()
                    
                    NavigationLink(
                        destination: HTTPReverseSearchView(
                            selectedItemIDs: Array(selectedItems), 
                            searchResults: searchResults
                        )
                    ) {
                        HStack {
                            Text("HTTP API „Åß‰∏ÄÊã¨ÈÄÜÂºï„ÅçÂÆüË°å")
                            Spacer()
                            Text("\(selectedItems.count)‰ª∂")
                                .font(.caption)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .clipShape(Capsule())
                        }
                    }
                    .buttonStyle(.prominent)
                    .padding(.horizontal)
                    .padding(.bottom)
                }
            }
        }
        .navigationTitle("Ê∑∑ÂêàÁ®ÆÂà•Ê§úÁ¥¢")
        .navigationBarTitleDisplayMode(.inline)
        .alert("„Ç®„É©„Éº", isPresented: $showError) {
            Button("OK") { }
        } message: {
            Text(errorMessage ?? "‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
        }
    }
    
    private func performSearch() {
        guard !searchTerm.isEmpty else { 
            print("‚ö†Ô∏è [MixedTypeSearchView] Empty search term")
            return 
        }
        
        print("üîç [MixedTypeSearchView] Starting search for: '\(searchTerm)'")
        
        isLoading = true
        searchResults.removeAll()
        
        Task {
            do {
                // 1Âõû„ÅÆAPI„Ç≥„Éº„É´„ÅßÂÖ®Á®ÆÂà•„ÇíÂèñÂæó
                var searchRequest = MusicCatalogSearchRequest(
                    term: searchTerm, 
                    types: [Album.self, Song.self, Artist.self]
                )
                searchRequest.limit = 10
                
                print("üì° [MixedTypeSearchView] Sending MusicKit search request...")
                let searchResponse = try await searchRequest.response()
                
                var allResults: [MixedSearchResult] = []
                
                // Albums
                let albumResults = searchResponse.albums.map { MixedSearchResult(from: $0) }
                allResults.append(contentsOf: albumResults)
                print("üéµ [MixedTypeSearchView] Found \(albumResults.count) albums")
                
                // Songs
                let songResults = searchResponse.songs.map { MixedSearchResult(from: $0) }
                allResults.append(contentsOf: songResults)
                print("üé∂ [MixedTypeSearchView] Found \(songResults.count) songs")
                
                // Artists
                let artistResults = searchResponse.artists.map { MixedSearchResult(from: $0) }
                allResults.append(contentsOf: artistResults)
                print("üë§ [MixedTypeSearchView] Found \(artistResults.count) artists")
                
                await MainActor.run {
                    self.searchResults = allResults
                    self.isLoading = false
                    print("‚úÖ [MixedTypeSearchView] Search completed with \(allResults.count) total results")
                }
                
            } catch {
                print("‚ùå [MixedTypeSearchView] Search failed: \(error)")
                await MainActor.run {
                    self.errorMessage = "Ê§úÁ¥¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: \(error.localizedDescription)"
                    self.showError = true
                    self.isLoading = false
                }
            }
        }
    }
}

struct MixedTypeSearchView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            MixedTypeSearchView()
        }
    }
}